:mod:`pmfp.entrypoint.grpc.build_`
==================================

.. py:module:: pmfp.entrypoint.grpc.build_

.. autoapi-nested-parse::

   编译grpc的protobuf为不同语言的代码并构造模板.



Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   source_temp/index.rst


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   build_pb_cxx/index.rst
   build_pb_go/index.rst
   build_pb_js/index.rst
   build_pb_py/index.rst
   core/index.rst


Package Contents
----------------


Functions
~~~~~~~~~

.. autoapisummary::

   pmfp.entrypoint.grpc.build_.get_abs_path
   pmfp.entrypoint.grpc.build_.get_abs_path_str
   pmfp.entrypoint.grpc.build_.build_pb_go
   pmfp.entrypoint.grpc.build_.build_pb_js
   pmfp.entrypoint.grpc.build_.build_pb_py
   pmfp.entrypoint.grpc.build_.build_pb_cxx
   pmfp.entrypoint.grpc.build_._build_pb
   pmfp.entrypoint.grpc.build_.build_grpc



Attributes
~~~~~~~~~~

.. autoapisummary::

   pmfp.entrypoint.grpc.build_.grpc_build


.. function:: get_abs_path(path_str: str, cwd: Optional[pathlib.Path] = None) -> pathlib.Path

   由路径字符串获取绝对路径.

   :param path_str: 路径字符创
   :type path_str: str
   :param cwd: 指定执行时的位置
   :type cwd: Optional[Path]

   :returns: 路径字符串的绝对路径
   :rtype: Path


.. function:: get_abs_path_str(path_str: str, cwd: Optional[pathlib.Path] = None) -> str

   由路径字符串获取绝对路径.

   :param path_str: 路径字符创
   :type path_str: str
   :param cwd: 指定执行时的位置
   :type cwd: Optional[Path]

   :returns: 路径字符串的绝对路径字符串
   :rtype: str


.. function:: build_pb_go(files: List[str], includes: List[str], to: str, as_type: Optional[List[str]], source_relative: bool, cwd: pathlib.Path, **kwargs: str) -> None

   编译grpc的protobuffer定义文件为go语言模块.

   :param files: 待编译的protobuffer文件
   :type files: List[str]
   :param includes: 待编译的protobuffer文件所在的文件夹
   :type includes: List[str]
   :param to: 编译成的模块文件放到的路径
   :type to: str
   :param as_type: 执行的目的.
   :type as_type: str
   :param source_relative: 是否使用路径作为包名,只针对go语言
   :type source_relative: bool


.. function:: build_pb_js(files: List[str], includes: List[str], to: str, as_type: Optional[List[str]], cwd: pathlib.Path, **kwargs: str) -> None

   编译grpc的protobuf定义文件为js语言模块.

   :param files: 待编译的protobuffer文件
   :type files: List[str]
   :param includes: 待编译的protobuffer文件所在的文件夹
   :type includes: List[str]
   :param to: 编译成的模块文件放到的路径
   :type to: str
   :param as_type: 执行的目的. Default: "source"
   :type as_type: str


.. function:: build_pb_py(files: List[str], includes: List[str], to: str, as_type: Optional[List[str]], cwd: pathlib.Path, **kwargs: str) -> None

   编译grpc的protobuf定义文件为python语言模块.

   :param files: 待编译的protobuffer文件
   :type files: List[str]
   :param includes: 待编译的protobuffer文件所在的文件夹
   :type includes: List[str]
   :param to: 编译成的模块文件放到的路径
   :type to: str
   :param as_type: 执行的目的. Default: "source"
   :type as_type: str


.. function:: build_pb_cxx(files: List[str], cwd: pathlib.Path) -> None

   为c++版本的grpc构造模板.

   由于使用cmake管理,而cmake难以解析所以只能给个大致

   :param files: 待编译的protobuffer文件
   :type files: List[str]
   :param cwd: 执行时候的根目录
   :type cwd: Path


.. data:: grpc_build
   

   

.. function:: _build_pb(language: str, files: List[str], includes: List[str], to: str, as_type: Optional[List[str]], source_relative: bool, cwd: pathlib.Path, **kwargs: str) -> None


.. function:: build_grpc(language: str, files: List[str], pb_includes: List[str], to: str, source_relative: bool, kwargs: Optional[str] = None, cwd: str = '.', as_type: Optional[List[str]] = None) -> None

   编译grpc的protobuf的schema为不同语言的代码.

   :param language: 编译到的执行环境,可选的有"go","py","js"
   :type language: List[str]
   :param files: 待编译的文件列表
   :type files: List[str]
   :param pb_includes: 待编译文件及其依赖所在文件夹列表
   :type pb_includes: List[str]
   :param to: 编译到的模块所在文件夹.
   :type to: str
   :param source_relative: 是否使用路径作为包名,只针对go语言
   :type source_relative: bool
   :param kwargs: Default: None,
   :type kwargs: Optional[str]
   :param cwd: 执行的根目录. Default: "."
   :type cwd: str
   :param as_type: 执行的目的,可以是client,service,aioclient,aioserv,nogencli,nogenserv. Default: None
   :type as_type: Optional[List[str]]


