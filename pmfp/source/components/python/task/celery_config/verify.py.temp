from jsonschema import validate
schema = {
    "title": "config",
    "description": "config verify",
    "type": "object",
    "properties": {
        "BROKER_URL": {
            "description": "broker url",
            "type": "string"
        }, "CELERY_DISABLE_RATE_LIMITS": {
            "description": "disable rate limits",
            "type": "boolean"
        }, "CELERY_RESULT_BACKEND": {
            "description": "result backend",
            "type": "string"
        }, "CELERY_TASK_RESULT_EXPIRES": {
            "description": "task result expires",
            "type": "integer"
        }, "CELERY_RESULT_SERIALIZER": {
            "description": "task result serializer",
            "type": "string"
        }, "CELERY_TASK_SERIALIZER": {
            "description": "task serializer",
            "type": "string"
        }, "CELERY_IMPORTS": {
            "description": "listen to port",
            "type": "string"
        }, "CELERYD_MAX_TASKS_PER_CHILD": {
            "description": "max task per child",
            "type": "integer"
        }
    },
    "required": ["BROKER_URL"]
}


def config_schema(instance):
    try:
        validate(instance=instance, schema=schema)
    except:
        raise
    else:
        return instance