package main

import (
	"flag"
	cli "$project_name/cli"
	"log"
	"time"
)

func test_rpc(client_address string) {
	client, err := cli.New(client_address)
	if err != nil {
		log.Fatalf("fail to dial: %v", err)
	}
	defer client.Close()
	//测试请求-响应
	result, err := client.Square(2.0, time.Second)
	if err != nil {
		log.Fatalln("Square请求报错")
	}
	log.Println("get Square result:", result)
	//测试请求-响应流
	rech := client.RangeSquare(5.0, 10*time.Second)
	if err != nil {
		log.Fatalln("RangeSquare请求报错")
	}
	for i := range rech {
		log.Println("RangeSquare获得", i)
	}
	//测试请求流-响应
	inch := make(chan float64)
	go func() {
		for i := 0; i < 6; i++ {
			inch <- float64(i)
			time.Sleep(time.Second)
		}
		close(inch)
	}()
	result, err = client.SumSquare(inch, 10*time.Second)
	if err != nil {
		log.Fatalln("SumSquare请求报错")
	} else {
		log.Println("get SumSquare result:", result)
	}
	//测试请求流-响应流
	inch = make(chan float64)
	go func() {
		for i := 0; i < 6; i++ {
			inch <- float64(i)
			time.Sleep(time.Second)
		}
		close(inch)
	}()
	rech, err = client.StreamrangeSquare(inch, 10*time.Second)
	if err != nil {
		log.Fatalln("StreamrangeSquare请求报错")
	}
	for i := range rech {
		log.Println("StreamrangeSquare获得", i)
	}
}

func main() {
	address := flag.String("address", "localhost:5000", "连接或启动的地址")
	flag.Parse()
	test_rpc(*address)
}
