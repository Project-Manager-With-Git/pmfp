import time
from concurrent import futures
import tempfile,sys
from log import model_logger
import grpc
from data_pb2_grpc import RPCServicer,add_RPCServicer_to_server

_ONE_DAY_IN_SECONDS = 60 * 60 * 24


class App:
    def __init__(self, config=None):
        default_config = {
            "HOST": "localhost",
            "PORT": 5000,
            "DEBUG":True
        }
        self.register_instances = None
        if config:
            default_config.update(config)
        self.config = default_config

    def register_instance(self, instance):
        if not isinstance(instance,RPCServicer):
            raise AttributeError("需要rpcServer的实例")
        self.register_instances =instance

    def run(self,host=None,port=None,debug=False):
        if self.register_instances is None:
            assert False,"需要先注册实例"
        host = host or self.config["HOST"]
        port = port or self.config["PORT"]
        debug = debug or self.config["DEBUG"]
        if debug is False:
            model_logger.setLevel("WARNING")
            sys.stderr=tempfile.TemporaryFile() 
        
        grpcServer = grpc.server(futures.ThreadPoolExecutor(max_workers=4))

        add_RPCServicer_to_server(self.register_instances, grpcServer)
        model_logger.info(f'"msg":"grpc start @ tcp://{host}:{port}","debug":{debug}')
        grpcServer.add_insecure_port(f"{host}:{port}")
        grpcServer.start()
        try:
            while True:
                time.sleep(_ONE_DAY_IN_SECONDS)
        except KeyboardInterrupt:
            grpcServer.stop(0)
        except Exception as e:
            grpcServer.stop(0)
            raise
        finally:
            model_logger.info(f'"msg":"zerorpc @ {host}:{port} stoped!"')

