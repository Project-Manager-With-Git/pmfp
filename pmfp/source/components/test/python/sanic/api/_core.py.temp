import sys
import asyncio
import unittest
from pathlib import Path
try:
    from test.const import PROJECT_PATH, TEST_PATH, TEST_DB_URL
except:
    test_dir = str(Path(__file__).absolute().parent.parent)

    if test_dir not in sys.path:
        sys.path.append(test_dir)
    from const import PROJECT_PATH, TEST_PATH, TEST_DB_URL

src_path = str(PROJECT_PATH.joinpath("$project_name"))

if src_path not in sys.path:
    sys.path.append(src_path)
from model import (
    bind_db,
    drop_tables,
    moke_data
)
from api import restapi

from sanic import Sanic


DEFAULT_CONFIG = {
    'SECRET_KEY': 'some secret words',
    "JSON_AS_ASCII": False,
    "DB_URL": TEST_DB_URL
}


def init_test_app(config):
    app = Sanic()
    app.config.update(
        config
    )
    restapi.init_app(app)

    @app.listener('after_server_start')
    async def setup_db(app, loop):
        await bind_db(app.config["DB_URL"], loop=loop)
    return app


class Core(unittest.TestCase):
    # 初始化数据库和连接
    @classmethod
    def setUpClass(cls):
        app = init_test_app(DEFAULT_CONFIG)
        cls.client = app.test_client
        print("setUp api test context")

    @classmethod
    def tearDownClass(cls):
        print("tearDown api test context")

    def setUp(self):
        loop = asyncio.new_event_loop()
        loop.run_until_complete(bind_db(TEST_DB_URL, loop))
        loop.run_until_complete(moke_data())
        loop.close()
        print("instance setUp")
    def tearDown(self):
        loop = asyncio.new_event_loop()
        loop.run_until_complete(bind_db(TEST_DB_URL, loop))
        loop.run_until_complete(drop_tables())
        print("instance tearDown")