from jsonrpclib.SimpleJSONRPCServer import PooledJSONRPCServer
from jsonrpclib.threadpool import ThreadPool
import tempfile,sys
from logger import log

nofif_pool = ThreadPool(max_threads=10, min_threads=0)
request_pool = ThreadPool(max_threads=50, min_threads=10)


class App:
    def __init__(self, config=None):
        default_config = {
            "HOST": "localhost",
            "PORT": 5000
        }
        self.register_instances = []
        self.register_functions = {}
        if config:
            default_config.update(config)
        self.config = default_config

    def register_instance(self, instance):
        self.register_instances.append(instance)

    def register_function(self, name, func):
        self.register_functions[name] = func

    def run(self,host=None,port=None):
        host = host or self.config["HOST"]
        port = port or self.config["PORT"]
        nofif_pool.start()
        request_pool.start()
        with PooledJSONRPCServer((host, port),thread_pool=request_pool) as server:
            # 注册所有可调用函数的名字到system.listMethods方法
            # 注册可调用函数的docstring到system.methodHelp(func_name)方法
            # 注册可调用函数的签名到system.methodSignature(func_name)方法
            server.register_introspection_functions()
            server.set_notification_pool(nofif_pool)

            # 这个函数的作用是可以使客户端同时调用服务端的的多个函数。
            server.register_multicall_functions()

            # 注册一个类的实例,使其中的成员方法作为可调用的函数
            for ins in self.register_instances:
                server.register_instance(ins)

            # 注册一个函数,使它可以被调用,后面的字符串就是被调用的函数名
            for name, func in self.register_functions.items():
                server.register_function(func, name)
            # Run the server's main loop
            log.info("jsonrpc start", address=f"tcp://{host}:{port}")
            try:
                server.serve_forever()
            except:
                raise
            finally:
                request_pool.stop()
                nofif_pool.stop()
                server.set_notification_pool(None)
                log.info("jsonrpc stoped!", address=f"tcp://{host}:{port}")
