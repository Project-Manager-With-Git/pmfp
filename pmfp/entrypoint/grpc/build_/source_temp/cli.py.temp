from typing import Any, Optional, Dict
import grpc
from pyproxypattern import Proxy
from .${service_name_lower}_pb2_grpc import ${service_name}Stub


class Client(Proxy):
    __slots__ = ("url", "options", "channel", 'instance', '_callbacks', '_instance_check')
    url: Optional[str]
    options: Optional[Dict[str, Any]]
    channel: Optional[Any]
    instance: Optional[${service_name}Stub]

    def __init__(self, url: Optional[str] = None, **options: Any) -> None:
        super().__init__()
        self.channel = None
        self.instance = None
        if options:
            self.options = options
        else:
            self.options = None
        if url:
            self.url = url
            self.new_instance()
        else:
            self.url = None

    def new_instance(self) -> None:
        if not self.url:
            raise AttributeError("need url!")
        if self.options:
            options = [(k, v) for k, v in self.options.items()]
            self.channel = grpc.insecure_channel(self.url, options=options)
        else:
            self.channel = grpc.insecure_channel(self.url)
        client = ${service_name}Stub(self.channel)
        self.initialize(client)

    def initialize_from_url(self, url: str, **options: Any) -> "Client":
        self.url = url
        self.options = options
        self.new_instance()
        return self

    def close(self) -> None:
        if self.channel:
            self.channel.close()
            self.channel = None
            self.instance = None

    def __enter__(self) -> "Client":
        if not self.instance:
            self.new_instance()
        return self

    def __exit__(self, exc_type: Any, exc: Any, tb: Any) -> None:
        self.close()


client = Client()
