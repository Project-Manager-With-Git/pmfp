:mod:`pmfp.entrypoint.build_.core`
==================================

.. py:module:: pmfp.entrypoint.build_.core

.. autoapi-nested-parse::

   ppm build命令的处理.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pmfp.entrypoint.build_.core.Build




Attributes
~~~~~~~~~~

.. autoapisummary::

   pmfp.entrypoint.build_.core.build_cmd


.. class:: Build(*, description: Optional[str] = None, epilog: Optional[str] = None, usage: Optional[str] = None, name: Optional[str] = None, schema: Optional[schema_entry.entrypoint_base.SchemaType] = None, verify_schema: Optional[bool] = None, default_config_file_paths: Optional[List[str]] = None, config_file_only_get_need: Optional[bool] = None, load_all_config_file: Optional[bool] = None, env_prefix: Optional[str] = None, parse_env: Optional[bool] = None, argparse_check_required: Optional[bool] = None, argparse_noflag: Optional[str] = None, config_file_parser_map: Optional[Dict[str, Callable[[pathlib.Path], Dict[str, Any]]]] = None, main: Optional[Callable[Ellipsis, None]] = None)


   Bases: :py:obj:`pmfp.utils.endpoint.EndPoint`

   打包指定位置项目为便于分发的形式.

   需要指定形式为:
       exec--可执行程序,可以通过static来指定是否为纯静态可执行程序
       alib--静态库
       dlib--动态库
       zip--将文件打包为zip包

   go语言:
       exec--可执行程序,可以通过static来指定是否为纯静态可执行程序
       alib--静态库
       dlib--动态库
       zip--将文件打包为zip包

   cython语言:
       可以编译为exec和dlib

   python语言:
       由于python本身为脚本语言所以其打包只是将源码放入zip包中
       exec--打包为.pyz文件,如果声明为`static`则将依赖也放入zip中,如果声明`mini`则代码先编译为pyc再打包
       zip--wheel打包

   .. attribute:: argparse_noflag
      :annotation: = code

      

   .. attribute:: schema
      

      


.. data:: build_cmd
   

   

