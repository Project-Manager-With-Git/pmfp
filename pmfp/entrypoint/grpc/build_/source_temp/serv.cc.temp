/*
 *
 * Copyright 2015 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

#include <iostream>
#include <memory>
#include <string>
#include <cmath>
#include <grpcpp/grpcpp.h>
#include <grpcpp/health_check_service_interface.h>
#include <grpcpp/ext/proto_server_reflection_plugin.h>
#include <spdlog/spdlog.h>
#include "${service_name_lower}.grpc.pb.h"

using grpc::Server;
using grpc::ServerBuilder;
using grpc::ServerContext;
using grpc::ServerWriter;
using grpc::ServerReader;
using grpc::ServerReaderWriter;
using grpc::Status;
using ${service_name_lower}::Message;
using ${service_name_lower}::SQUARE_RPC;

// Logic and data behind the server's behavior.
class SQUARE_RPCServiceImpl final : public SQUARE_RPC::Service {
  Status Square(ServerContext* context, const Message* request,
                  Message* reply) override {
    auto m =request->message();
    spdlog::info("Query is query");
    reply->set_message(pow(m,2));
    return Status::OK;
  }
  Status RangeSquare(ServerContext* context, const Message* request,
                    ServerWriter<Message>* writer) override {
    auto m =request->message();
    for (int n = 0; n < m; ++n) {
        auto f = pow(double(n),2);
        Message res;
        res.set_message(f);
        writer->Write(res);
      }
    return Status::OK;
  }

  Status SumSquare(ServerContext* context, ServerReader<Message>* reader, Message* summary) override {
    Message m;
    double r = 0.0;
    while (reader->Read(&m)) {
      spdlog::info("Query is query");
      auto n = (&m)->message();
      r += pow(double(n),2);
    }
    spdlog::info("Query is end");
    summary->set_message(r);
    return Status::OK;
  }

  Status StreamrangeSquare(ServerContext* context,
                 ServerReaderWriter<Message, Message>* stream) override {
  Message m;
  while (stream->Read(&m)) {
    spdlog::info("Query get");
    auto n = (&m)->message();
    Message r;
    r.set_message(pow(double(n),2));
    stream->Write(r);
    spdlog::info("Response send");
  }
  return Status::OK;
}
};

void RunServer() {
  std::string server_address("0.0.0.0:5000");
  ${service_name}ServiceImpl service;

  grpc::EnableDefaultHealthCheckService(true);
  grpc::reflection::InitProtoReflectionServerBuilderPlugin();
  ServerBuilder builder;
  // Listen on the given address without any authentication mechanism.
  builder.AddListeningPort(server_address, grpc::InsecureServerCredentials());
  // Register "service" as the instance through which we'll communicate with
  // clients. In this case it corresponds to an *synchronous* service.
  builder.RegisterService(&service);
  // Finally assemble the server.
  std::unique_ptr<Server> server(builder.BuildAndStart());
  std::cout << "Server listening on " << server_address << std::endl;

  // Wait for the server to shutdown. Note that some other thread must be
  // responsible for shutting down the server for this call to ever return.
  server->Wait();
}

int main(int argc, char** argv) {
  RunServer();
  return 0;
}