from typing import Any, Optional, Dict
import grpc
from pyproxypattern import Proxy
from .${service_name_lower}_pb2_grpc import ${service_name}Stub


class AioClient(Proxy):
    __slots__ = ("url", "options", "channel", 'instance', '_callbacks', '_instance_check')
    url: Optional[str]
    options: Optional[Dict[str, Any]]
    channel: Optional[Any]
    instance: Optional[${service_name}Stub]

    def __init__(self, url: Optional[str] = None, **options: Any) -> None:
        super().__init__()
        if url:
            self.url = url
        else:
            self.url = None
        self.channel = None
        self.instance = None
        if options:
            self.options = options
        else:
            self.options = None

    def new_instance(self) -> ${service_name}Stub:
        if not self.url:
            raise AttributeError("新建对象必须至少有设置url")
        if self.options:
            options = [(k, v) for k, v in self.options.items()]
            self.channel = grpc.aio.insecure_channel(self.url, options=options)
        else:
            self.channel = grpc.aio.insecure_channel(self.url)
        client = ${service_name}Stub(self.channel)
        return client

    def initialize_from_url(self, url: str, **options: Any) -> None:
        self.url = url
        self.options = options
        instance = self.new_instance()
        self.initialize(instance)

    async def close(self, grace: Optional[float] = None) -> None:
        if self.channel:
            return await self.channel.close(grace)


aioclient = AioClient()
