:py:mod:`pmfp.entrypoint.docker_.compose.new.core`
==================================================

.. py:module:: pmfp.entrypoint.docker_.compose.new.core

.. autoapi-nested-parse::

   ppm docker compose new命令的处理.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pmfp.entrypoint.docker_.compose.new.core.New




Attributes
~~~~~~~~~~

.. autoapisummary::

   pmfp.entrypoint.docker_.compose.new.core.properties
   pmfp.entrypoint.docker_.compose.new.core.dockercompose_new


.. py:data:: properties
   :annotation: :Dict[str, object]

   

.. py:class:: New(*, description: Optional[str] = None, epilog: Optional[str] = None, usage: Optional[str] = None, name: Optional[str] = None, schema: Optional[schema_entry.entrypoint_base.SchemaType] = None, verify_schema: Optional[bool] = None, default_config_file_paths: Optional[List[str]] = None, config_file_only_get_need: Optional[bool] = None, load_all_config_file: Optional[bool] = None, env_prefix: Optional[str] = None, parse_env: Optional[bool] = None, argparse_check_required: Optional[bool] = None, argparse_noflag: Optional[str] = None, config_file_parser_map: Optional[Dict[str, Callable[[pathlib.Path], Dict[str, Any]]]] = None, main: Optional[Callable[Ellipsis, None]] = None)

   Bases: :py:obj:`pmfp.utils.endpoint.EndPoint`

   创建一个docker-compose文件.

   当指定的dockercompose文件存在时创建全新内容并覆盖原来老的compose文件,老的会被重新保存为`原名.{timestamp}_bak`;
   当指定的dockercompose文件不存在时创建新的compose文件.
   更新操作只能更新如下内容:

   1. service
   2. 外部networks声明
   3. 外部volumes声明
   4. 外部configs声明
   5. 外部secrits声明

   .. py:attribute:: argparse_noflag
      :annotation: = compose_version

      

   .. py:attribute:: schema
      

      


.. py:data:: dockercompose_new
   

   

