:mod:`pmfp.entrypoint.build_`
=============================

.. py:module:: pmfp.entrypoint.build_

.. autoapi-nested-parse::

   编译指定项目.

   编译操作只对静态语言有效



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   build_go/index.rst
   build_py/index.rst
   core/index.rst
   utils/index.rst


Package Contents
----------------


Functions
~~~~~~~~~

.. autoapisummary::

   pmfp.entrypoint.build_.get_abs_path
   pmfp.entrypoint.build_.go_build
   pmfp.entrypoint.build_.py_build
   pmfp.entrypoint.build_.build



Attributes
~~~~~~~~~~

.. autoapisummary::

   pmfp.entrypoint.build_.build_cmd


.. function:: get_abs_path(path_str: str, cwd: Optional[pathlib.Path] = None) -> pathlib.Path

   由路径字符串获取绝对路径.

   :param path_str: 路径字符创
   :type path_str: str
   :param cwd: 指定执行时的位置
   :type cwd: Optional[Path]

   :returns: 路径字符串的绝对路径
   :rtype: Path


.. function:: go_build(code: str, project_name: str, *, output_dir: pathlib.Path, cwd: pathlib.Path, upx: bool = False, mini: bool = False, build_as: str = 'exec', for_linux_arch: Optional[str] = None) -> None


.. function:: py_build(code: str, project_name: str, *, output_dir: pathlib.Path, cwd: pathlib.Path, pypi_mirror: Optional[str] = None, requires: Optional[List[str]] = None, build_as: str = 'exec', static: bool = False, mini: bool = False) -> None


.. data:: build_cmd
   

   

.. function:: build(language: str, code: str, project_name: str, *, output_dir: str = '.', upx: bool = False, static: bool = True, mini: bool = False, includes: Optional[List[str]] = None, libs: Optional[List[str]] = None, lib_dir: Optional[List[str]] = None, build_as: str = 'exec', for_linux_arch: Optional[str] = None, pypi_mirror: Optional[str] = None, requires: Optional[List[str]] = None, cwd: str = '.') -> None

   编译指定代码.

   只支持对linux的交叉编译.

   :param language: 编译的代码语言,支持go
   :type language: str
   :param code: 语言源码位置或者入口文件位置
   :type code: str
   :param project_name: 项目名
   :type project_name: str
   :param output_dir: 编译结果放置的目录
   :type output_dir: str
   :param upx: 是否使用upx给可执行文件加壳. Defaults to False.
   :type upx: bool, optional
   :param static: 是否编译为无依赖的静态文件. Defaults to True.
   :type static: bool, optional
   :param mini: 是否最小化编译. Defaults to False.
   :type mini: bool, optional
   :param includes: 包含的头文件路径. Defaults to None.
   :type includes: Optional[List[str]], optional
   :param libs: 使用的库名. Defaults to None.
   :type libs: Optional[List[str]], optional
   :param lib_dir: 使用的库的位置. Defaults to None.
   :type lib_dir: Optional[List[str]], optional
   :param build_as: 编译为的目标,可选有exec(可执行文件),alib(静态库),dlib(动态库). Defaults to "exec".
   :type build_as: str, optional
   :param for_linux_arch: 是否交叉编译支持其他指令集版本的linux,支持amd64和arm64. Defaults to None.
   :type for_linux_arch: str, optional
   :param cwd: 执行编译操作时的执行位置. Defaults to ".".
   :type cwd: str, optional


